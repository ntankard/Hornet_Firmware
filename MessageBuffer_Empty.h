#pragma once

#include "MessageBuffer_Passer.h"

/**
* \brief	A dynamic size message container for int16_t
*
* \param	ID		The message ID
* \param	ComPri	The comunications prioroty of the message (if monitor is true)
* \param	Size	The number of int16_t in the message
*/
class MessageBuffer_Empty : public MessageBuffer_Passer
{
public:

	//-----------------------------------------------------------------------------------------------------------------------------

	MessageBuffer_Empty()
	{
		_ID = 0;
		_isLocked = true;
		_monitor = false;
	}

	//-----------------------------------------------------------------------------------------------------------------------------
	
	uint8_t setID(uint8_t ID)
	{
		_ID = ID;
	}

	uint8_t getID()
	{
		return _ID;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	uint8_t getComPri()
	{
		return 0;
	}

	//------------------------------------------------------------ DATA ------------------------------------------------------------

	int16_t* getData()
	{
		return 0;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	void copyData(int16_t* data)
	{

	}

	//-----------------------------------------------------------------------------------------------------------------------------

	int getDataSize()
	{
		return 0;
	}

	//----------------------------------------------------------- BYTES ------------------------------------------------------------

	uint8_t* getBytes()
	{
		return 0;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	void copyBytes(uint8_t* data)
	{

	}

	//-----------------------------------------------------------------------------------------------------------------------------

	int getBytesSize()
	{
		return 0;
	}

	//----------------------------------------------------------- PACKET -----------------------------------------------------------

	uint8_t* getPacket()
	{
		return 0;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	void copyPacket(uint8_t* data)
	{

	}

	//-----------------------------------------------------------------------------------------------------------------------------

	int getPacketSize()
	{
		return 0;
	}

	//----------------------------------------------------------- LOCK -----------------------------------------------------------

	void lock()
	{
		_isLocked = true;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	void unlock()
	{
		_isLocked = false;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	bool isLocked()
	{
		return _isLocked;
	}

	//---------------------------------------------------------- MONITOR ----------------------------------------------------------

	void monitor()
	{
		_monitor = true;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	void dontMonitor()
	{
		_monitor = false;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

	bool isMonitor()
	{
		return _monitor;
	}

	//-----------------------------------------------------------------------------------------------------------------------------

private:

	bool _isLocked;
	bool _monitor;
	uint8_t _ID;
};